#include <iostream>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>

#include "Config.hpp"
#include "Client.hpp"

Client::Client()
{
    sockaddr_in serverAddr{};

    if ((m_ClientSocket = socket(AF_INET, SOCK_STREAM, 0)) == -1)
    {
        throw std::runtime_error("Error creating socket");
    }

#ifdef DEBUG
    std::cout << "Client::m_ClientSocket = " << m_ClientSocket << std::endl;
    // Client_1::m_ClientSocket = 3
    // (Server) ClientHandler_1::m_ClientSocket = 5
    // Client_2::m_ClientSocket = 3
    // (Server) ClientHandler_2::m_ClientSocket = 6

    // The client sockets have the same value. This is because the socket IDs (clientSocket) are generated by the socket system call on the client side, and they are local to each instance of the client program.

    // If we had to illustrate that it would look like:
    // clientSocketOnServerSide = 5  (global) <-> clientSocketOnClientSide = 3 (local)
    // clientSocketOnServerSide = 6  (global) <-> clientSocketOnClientSide = 3 (local)
    // clientSocketOnServerSide = 7  (global) <-> clientSocketOnClientSide = 3 (local)

    // The same local clientSocket value can appear on different instances of the client side, but on the server side, each connection has a unique global identifier returned by accept. This global identifier is used by the server to manage communication with each connected client.
#endif

    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(Config::Networking::PORT);
    serverAddr.sin_addr.s_addr = inet_addr(Config::Networking::SERVER_IP_ADDRESS.data()); // Server IP address

    if (connect(m_ClientSocket, reinterpret_cast<struct sockaddr *>(&serverAddr), sizeof(serverAddr)) == -1)
    {
        close(m_ClientSocket);
        throw std::runtime_error("Error connecting to server");
    }

    std::cout << "Connected to server" << std::endl;
}

int Client::GetClientSocket()
{
    return m_ClientSocket;
}

void Client::Stop()
{
    if (m_ClientSocket != -1)
    {
        std::cout << "Closing client socket..." << std::endl;
        // shutdown(m_ClientSocket, SHUT_RDWR);
        close(m_ClientSocket);
        m_ClientSocket = -1;
        std::cout << "Socket closed" << std::endl;
    }
}

Client::~Client()
{
    Stop();
}
